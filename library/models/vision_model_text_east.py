# ################################################################################################
# ------------------------------------------------------------------------------------------------
# File:   vision_model_text_east.py
# Author: Luis Monteiro
#
# Created on nov 17, 2019, 22:00 PM
# ------------------------------------------------------------------------------------------------
# ################################################################################################
#
# internal
from library           import VisionModel
from library.resources import vision_resource
# external
import cv2 as cv
#
# ################################################################################################
# ------------------------------------------------------------------------------------------------
# VisionModelTextEAST 
# ------------------------------------------------------------------------------------------------
# ################################################################################################
class VisionModelTextEAST(VisionModel):
    #
    # -------------------------------------------------------------------------
    # initialization
    # -------------------------------------------------------------------------
    #
    def __init__(self):
        super().__init__()
        # load network
        self.__net = cv.dnn.readNet(vision_resource('east-test'))
        # select output layers
        self.__output_layers = [
            'feature_fusion/Conv_7/Sigmoid'
            'feature_fusion/concat_3'
        ]
    #
    # -------------------------------------------------------------------------
    # process
    # -------------------------------------------------------------------------
    #
    def process(self, frame):
        # prepare input
        data = self.__prepare_input(frame)
        print(data.shape)
        #from cv2 import imshow
        #imshow('blob', data.reshape(data.shape[2],data.shape[3],data.shape[1]))

        # run model
        data = self.__run_model(data)
        return data
    #
    # -------------------------------------------------------------------------
    # steps
    # -------------------------------------------------------------------------
    #         
    def __prepare_input(self, frame):
        # Create a 4D blob from frame.
        height = frame.shape[0]
        height = 320
        width  = frame.shape[1]
        width  = 320
        return cv.dnn.blobFromImage(
            frame, 1.0, (width, height), (123.68, 116.78, 103.94), True, False)

    def __run_model(self, blob):
        self.__net.setInput(blob)
        # return scores, geometry 
        return self.__net.forward(self.__output_layers)[0:2]

# ################################################################################################
# ------------------------------------------------------------------------------------------------
# End
# ------------------------------------------------------------------------------------------------
# ################################################################################################
