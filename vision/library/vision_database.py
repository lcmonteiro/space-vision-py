# ################################################################################################
# ------------------------------------------------------------------------------------------------
# File:   vision_database.py
# Author: Luis Monteiro
#
# Created on nov 8, 2019, 22:00 PM
# ------------------------------------------------------------------------------------------------
# ################################################################################################

# external imports
from logging  import getLogger  as logger
from time     import time
from bisect   import bisect_left, bisect_right

# ################################################################################################
# ------------------------------------------------------------------------------------------------
# Vision Database 
# ------------------------------------------------------------------------------------------------
# ################################################################################################
class VisionDatabase:

    # -----------------------------------------------------------------------------------
    # initialization
    # -----------------------------------------------------------------------------------
    def __init__(self):
        # load logger
        self.__logger    = logger()
        # data container
        self.__container = {}

    # -----------------------------------------------------------------------------------
    #  insert document
    # -----------------------------------------------------------------------------------
    def insert(self, key, data):
        timestamp = time()
        # log information
        self.__logger.info('insert[{}]={}'.format(key, (data, timestamp)))
        if key not in self.__container:
            # save information
            self.__container[key] =  [(data, timestamp)]
        else:
            self.__container[key] += [(data, timestamp)]
    
    # -----------------------------------------------------------------------------------
    #  find documents
    # -----------------------------------------------------------------------------------
    def find(self, key, time):
        # --------------------------------------------------------------------- 
        # define filter 
        # ---------------------------------------------------------------------
        class Filter:
            def __init__(self, collection):
                self.__collection = collection
            
            def __getitem__(self, key):
                return self.__collection[key][1]

            def __len__(self):
                return len(self.__collection)

            def __call__(self, time):
                return map(lambda x :x[0], self.__collection[
                    bisect_left(self, time[0]): bisect_right(self, time[1])])

        # --------------------------------------------------------------------- 
        # execute filter 
        # ---------------------------------------------------------------------
        return Filter(self.__container.get(key,[]))(time)
# #################################################################################################
# -------------------------------------------------------------------------------------------------
# End
# -------------------------------------------------------------------------------------------------
# #################################################################################################
