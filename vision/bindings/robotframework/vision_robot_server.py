# #################################################################################################
# -------------------------------------------------------------------------------------------------
# File:   vision_robot_server.py
# Author: Luis Monteiro
#
# Created on nov 8, 2019, 22:00 PM
# -------------------------------------------------------------------------------------------------
# #################################################################################################

# #################################################################################################
# -----------------------------------------------------------------------------
# imports
# -----------------------------------------------------------------------------
# #################################################################################################

# extern
from robotremoteserver import RobotRemoteServer  as Server
from logging           import getLogger          as logger
from yaml              import safe_load          as loader

# local
from .vision_robot_api import VisionApi

# #################################################################################################
# -----------------------------------------------------------------------------
# Create Callbacks
# -----------------------------------------------------------------------------
# #################################################################################################
# -------------------------------------------------------------------------------------------------
# default
# -------------------------------------------------------------------------------------------------
def api_default(key, data):
    # convert string to int list
    data = list(map(lambda x: int(x, 16), data.split()))
    # parse
    try :
        return { key : float(int.from_bytes(bytearray(data),   'big')) }
    except:
        return { key : data }
# #################################################################################################
# ---------------------------------------------------------------------------------------
# main
# ---------------------------------------------------------------------------------------
# #################################################################################################
def main(ip, port, config):   
    # Initialization API 
    vision = VisionApi(loader(open(config)))        
    # Start server
    Server(vision, host=ip, port=port)
 
# #################################################################################################
# ---------------------------------------------------------------------------------------
# entry point
# ---------------------------------------------------------------------------------------
# #################################################################################################  
if __name__ == '__main__':
    from argparse import ArgumentParser
    from logging  import basicConfig     as config_logger
    from logging  import DEBUG           as LEVEL
    from os.path  import abspath, dirname
    from sys      import stdout
    # -----------------------------------------------------------------------------------
    # parse parameters
    # -----------------------------------------------------------------------------------
    parser = ArgumentParser()
    parser.add_argument('--ip',          
        type    =str, 
        default = '127.0.0.1',
        help    = 'IP address')
    parser.add_argument('--port',        
        type    =int, 
        default = 20010,
        help    = 'TCP port')
    parser.add_argument('--config',
        type    =str, 
        default = '%s/vision_robot_config.yaml'%(dirname(abspath(__file__))),
        help    = 'configuration file path')
    args = parser.parse_args()

    # -----------------------------------------------------------------------------------
    # log configuration
    # -----------------------------------------------------------------------------------
    config_logger(
        stream  = stdout,
        filemode= 'w',
        #level   = DEBUG, 
        level   = LEVEL, 
        #filename= 'dlt.log', 
        format  = '[%(asctime)s] [%(levelname)-10s] [%(funcName)s] %(message)s')

    # -----------------------------------------------------------------------------------
    # main 
    # -----------------------------------------------------------------------------------
    try:
        exit(main(**vars(args)))
    except Exception as e:
        logger().exception(e)
        exit(-1)
    except KeyboardInterrupt:
        exit(0)
# #################################################################################################
# ---------------------------------------------------------------------------------------
# end
# ---------------------------------------------------------------------------------------
# #################################################################################################  